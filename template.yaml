AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam_sold

  Powertools example

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.12

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:
  PlaceBidFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: place_bid.lambda_handler
      CodeUri: src
      Layers:
        - !Ref SamSoldLayer
      Description: Place Bid function
      Architectures:
        - x86_64
      Events:
        PlaceBidPath:
          Type: Api
          Properties:
            Path: /bid
            Method: post
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt ProcessBidQueue.Arn
      Environment:
        Variables:
          BID_QUEUE_URL: !Ref ProcessBidQueue

  LotApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lot_api.lambda_handler
      CodeUri: src
      Layers:
        - !Ref SamSoldLayer
      Description: Resources API for Lot
      Architectures:
        - x86_64
      Events:
        GetLotPath:
          Type: Api
          Properties:
            Path: /lots/{lot_id}
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BidsTable
      Environment:
        Variables:
          BIDS_TABLE: !Ref BidsTable

  ProcessBidFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process_bid.lambda_handler
      CodeUri: src
      Layers:
        - !Ref SamSoldLayer
      Description: Process Bid Queue Worker
      Architectures:
        - x86_64
      Timeout: 30
      ReservedConcurrentExecutions: 1
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Enabled: true
            Queue: !GetAtt ProcessBidQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
      Policies:
        - SQSPollerPolicy:
            QueueName: !Ref ProcessBidQueue
        - SQSSendMessagePolicy:
            QueueName: !Ref ProcessBidDeadLetterQueue
        - DynamoDBCrudPolicy:
            TableName: !Ref BidsTable
      Environment:
        Variables:
          BID_QUEUE_URL: !Ref ProcessBidQueue
          BIDS_TABLE: !Ref BidsTable

  BroadcastLotChangesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: broadcast_lot_changes.lambda_handler
      Layers:
        - !Ref SamSoldLayer
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt BidsTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 5
            MaximumRetryAttempts: 2
            Enabled: true
            FilterCriteria:
              Filters:
                - Pattern: >
                    {
                      "eventName": ["MODIFY"],
                      "dynamodb": {
                        "Keys": {
                          "PK": {
                            "S": [{"prefix": "LOT#"}]
                          }
                        }
                      }
                    }

  SamSoldLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sam-sold-dependencies
      Description: Common Python dependencies
      ContentUri: layers/sam_sold_dependencies
      CompatibleRuntimes:
        - python3.12
    DeletionPolicy: Delete

  PlaceBidFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PlaceBidFunction}"
      RetentionInDays: 1

  ProcessBidFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProcessBidFunction}"
      RetentionInDays: 1

  LotApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LotApiFunction}"
      RetentionInDays: 1

  BroadcastLotChangesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BroadcastLotChangesFunction}"
      RetentionInDays: 1

  ProcessBidQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-bid-fifo-queue.fifo"
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ProcessBidDeadLetterQueue.Arn
        maxReceiveCount: 3

  ProcessBidDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-bid-fifo-queue-dlq.fifo"
      FifoQueue: true

  BidsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SamSoldBids
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ##### WEB SOCKETS
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MinimalWebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: dev
      ApiId: !Ref WebSocketApi
      AutoDeploy: true

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub "integrations/${ConnectIntegration}"

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WebSocketConnectHandler
      CodeUri: ./src/lot_notification
      Handler: ws_connection.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: "*"

  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect"


Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for for Hello World
      Function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"

  WebSocketApiEndpoint:
    Description: "WebSocket API endpoint"
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev
